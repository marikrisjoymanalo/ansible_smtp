---
- name: SMTP Queue Report and Cleanup
  hosts: ansible_smtp_report
  become: yes
  vars:
    output_file: "/root/smtp-report.csv"
    temp_file: "/root/smtp-report.tmp.csv"
    report_dir: "/root/smtp-report/daily-report"
    log_file: "/root/smtp-log/daily-email-cleanup.log"
    limit_mb: 20
    email_recipients: "marikrisjoymanalo@deltek.com"
    email_from: "CloudNoReply@deltek.com"
    script_path: "/root/smtp-report-script.sh"

  tasks:
    - name: Get current date
      set_fact:
        report_date: "{{ ansible_date_time.date }}"
        final_file: "smtp-report-{{ ansible_date_time.date }}.csv"

    - name: Get server hostname
      set_fact:
        server_name: "{{ ansible_hostname }}"

    - name: Ensure report directory exists
      file:
        path: "{{ report_dir }}"
        state: directory
        mode: '0755'

    - name: Ensure log directory exists
      file:
        path: "{{ log_file | dirname }}"
        state: directory
        mode: '0755'

    - name: Create processing script
      copy:
        dest: "{{ script_path }}"
        mode: '0755'
        content: |
          #!/bin/bash
          output_file="{{ output_file }}"
          temp_file="{{ temp_file }}"
          report_dir="{{ report_dir }}"
          report_date="{{ report_date }}"
          final_file="{{ final_file }}"
          log_file="{{ log_file }}"
          server_name="{{ server_name }}"
          limit_mb={{ limit_mb }}
          
          # Clear temp file
          > "$temp_file"
          
          # 20MB in bytes
          limit_bytes=$((limit_mb * 1024 * 1024))
          
          for file in /var/spool/mqueue/df*; do
            [ ! -f "$file" ] && continue
            
            date=""; from=""; to=""; subject=""; cd=""; messageid_server=""
            
            filesize_bytes=$(stat -c%s "$file" 2>/dev/null || echo 0)
            
            if [ "$filesize_bytes" -gt "$limit_bytes" ]; then
              filesize_num=$(awk "BEGIN {printf \"%.2f\", $filesize_bytes/1024/1024}")
              
              # Parse qf file
              qf_file="/var/spool/mqueue/qf${file##*/df}"
              if [ -f "$qf_file" ]; then
                while IFS= read -r line; do
                  case "$line" in
                    S\<*)
                      [ -z "$from" ] && from="${line#S<}" && from="${from%>}"
                      ;;
                    rRFC822\;*)
                      [ -z "$to" ] && to="${line#rRFC822; }"
                      ;;
                    H\?\?Date:*)
                      [ -z "$date" ] && date="${line#H??Date: }"
                      ;;
                    H\?\?Subject:*)
                      [ -z "$subject" ] && subject="${line#H??Subject: }"
                      ;;
                    H\?\?From:*)
                      [ -z "$from" ] && from="${line#H??From: }"
                      ;;
                    H\?\?To:*)
                      [ -z "$to" ] && to="${line#H??To: }"
                      ;;
                    H\?\?Message-I*:*)
                      if [ -z "$messageid_server" ]; then
                        msgid="${line#H??Message-I*: }"
                        messageid_server=$(echo "$msgid" | sed -n 's/.*@\([^.]*\).*/\1/p')
                      fi
                      ;;
                    H\?\?Content-Disposition:*)
                      [ -z "$cd" ] && cd="${line#H??Content-Disposition: }"
                      ;;
                  esac
                done < "$qf_file"
              fi
              
              # Escape commas and quotes for CSV
              date="${date//,/ }"; date="${date//\"/}"
              from="${from//,/ }"; from="${from//\"/}"
              to="${to//,/ }"; to="${to//\"/}"
              subject="${subject//,/ }"; subject="${subject//\"/}"
              cd="${cd//,/ }"; cd="${cd//\"/}"
              messageid_server="${messageid_server//,/ }"; messageid_server="${messageid_server//\"/}"
              
              # Write to temp file
              printf '"%s",%s,"%s","%s","%s","%s","%s","%s"\n' \
                "$file" "$filesize_num" "$date" "$from" "$to" "$subject" "$cd" "$messageid_server" >> "$temp_file"
            fi
          done
          
          # Write CSV header
          echo "File,FileSize(MB),Date,From,To,Subject,Content-Disposition,Message-ID-Server" > "$output_file"
          
          # Sort by size (largest first) and append data
          if [ -f "$temp_file" ] && [ -s "$temp_file" ]; then
            sort -t',' -k2 -nr "$temp_file" | awk -F',' 'BEGIN{OFS=","} { $2=$2 " MB"; print }' >> "$output_file"
          fi
          
          rm -f "$temp_file"
          
          echo "Report generated with $(tail -n +2 "$output_file" | wc -l) entries"

    - name: Execute processing script
      command: "{{ script_path }}"
      register: script_output

    - name: Display script output
      debug:
        var: script_output.stdout_lines

    - name: Check if report file exists and has content
      stat:
        path: "{{ output_file }}"
      register: report_stat

    - name: Display report file info
      debug:
        msg: "Report file size: {{ report_stat.stat.size | default(0) }} bytes"
      when: report_stat.stat.exists

    - name: Send email report
      shell: |
        echo -e "Please find your weekly report listing all queued/deferred emails attached - Emails exceeding 20 MB will be deleted post-report to prevent disk space issues.\n\nBest regards,\nDeltek" | \
        mailx -s "{{ server_name }} queued/deferred email report TEST3" \
              -r "{{ email_from }}" \
              -a "{{ output_file }}" \
              {{ email_recipients }}
      args:
        executable: /bin/bash
      when: report_stat.stat.exists and report_stat.stat.size > 100

    - name: Log report generation
      lineinfile:
        path: "{{ log_file }}"
        line: "{{ ansible_date_time.iso8601 }} Report generated and emailed: {{ report_dir }}/{{ final_file }}"
        create: yes

    - name: Copy report to final location
      copy:
        src: "{{ output_file }}"
        dest: "{{ report_dir }}/{{ final_file }}"
        remote_src: yes
      when: report_stat.stat.exists

    - name: Remove original report file
      file:
        path: "{{ output_file }}"
        state: absent

    - name: Stop sendmail service
      systemd:
        name: sendmail
        state: stopped
      register: sendmail_stop

    - name: Log sendmail stop
      lineinfile:
        path: "{{ log_file }}"
        line: "{{ ansible_date_time.iso8601 }} {{ 'Sendmail stopped successfully' if sendmail_stop.changed else 'WARNING: Failed to stop sendmail' }}"
        create: yes

    - name: Get list of files to delete from report
      shell: |
        tail -n +2 "{{ report_dir }}/{{ final_file }}" | cut -d',' -f1 | tr -d '"'
      register: files_to_delete
      changed_when: false
      ignore_errors: yes

    - name: Delete queued email files
      shell: |
        while IFS= read -r file; do
          if [ -n "$file" ] && [ -f "$file" ]; then
            rm -f "$file"
            echo "{{ ansible_date_time.iso8601 }} Deleted: $file" >> "{{ log_file }}"
            
            qf_file="/var/spool/mqueue/qf${file##*/df}"
            if [ -f "$qf_file" ]; then
              rm -f "$qf_file"
              echo "{{ ansible_date_time.iso8601 }} Deleted: $qf_file" >> "{{ log_file }}"
            fi
          fi
        done <<< "{{ files_to_delete.stdout }}"
      args:
        executable: /bin/bash
      when: files_to_delete.stdout is defined and files_to_delete.stdout | length > 0

    - name: Start sendmail service
      systemd:
        name: sendmail
        state: started
      register: sendmail_start

    - name: Log sendmail start
      lineinfile:
        path: "{{ log_file }}"
        line: "{{ ansible_date_time.iso8601 }} {{ 'Sendmail started successfully' if sendmail_start.changed else 'ERROR: Failed to start sendmail' }}"
        create: yes

    - name: Clean up processing script
      file:
        path: "{{ script_path }}"
        state: absent
